generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Customer {
    clerkId  String @id
    stripeId String @unique
}

model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    prices      Price[]
    images      Image[]
    cartItems   CartItem[]
    orderItems  OrderItem[]
    variants    Json
    details     String[]
    collections CollectionProduct[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Collection {
    id        String   @id @default(cuid())
    name      String
    products  CollectionProduct[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    imageSrc  String
    slug      String @unique
}

model CollectionProduct {
    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id])
    productId    String
    product      Product    @relation(fields: [productId], references: [id])

    @@id([collectionId, productId])
}

model Price {
    id String @id @default(cuid())
    price Float
    productId String
    product Product @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Image {
    id        String   @id @default(cuid())
    imageSrc  String
    imageAlt  String
    primary   Boolean
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    variant   Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id        String   @id @default(cuid())
    userId    String
    quantity  Int
    variants  Json
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id       String      @id @default(cuid())
    number   String
    invoiceSrc String
    userId    String
    items     OrderItem[]
    total     Float
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model OrderItem {
    id        String   @id @default(cuid())
    quantity  Int
    variants  Json
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    String
    shippedDate DateTime?
}